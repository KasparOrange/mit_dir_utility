            return DataTable(
                columns: const <DataColumn>[
                  DataColumn(
                    label: Text(
                      'Column A',
                      style: TextStyle(fontStyle: FontStyle.italic),
                    ),
                  ),
                  DataColumn(
                    label: Text(
                      'Column B',
                      style: TextStyle(fontStyle: FontStyle.italic),
                    ),
                  ),
                  DataColumn(
                    label: Text(
                      'Column C',
                      style: TextStyle(fontStyle: FontStyle.italic),
                    ),
                  ),
                  DataColumn(
                    label: Text(
                      'Column A',
                      style: TextStyle(fontStyle: FontStyle.italic),
                    ),
                  ),
                  DataColumn(
                    label: Text(
                      'Column B',
                      style: TextStyle(fontStyle: FontStyle.italic),
                    ),
                  ),
                  DataColumn(
                      label: Text(
                    'Column C',
                    style: TextStyle(fontStyle: FontStyle.italic),
                  )),
                  // Add more columns as needed
                ],
                rows: snapshot.data!.docs.map(
                  (DocumentSnapshot document) {
                    Map<String, dynamic> data = document.data() as Map<String, dynamic>;
                    return DataRow(
                      // shape: const Border.symmetric(horizontal: BorderSide()),
                      // leading: _tableCellName(data['firstName'], data['lastName']),
                      // title: SizedBox(
                      //     height: 40,
                      //     width: 100,
                      //     child: Center(
                      cells: [
                        // _tableCellTitle('Email'),
                        _tableCellEntry(data['email'], 200),
                        // _tableCellSpace(10),
                        // _tableCellTitle('Phone'),
                        _tableCellEntry(data['phone'], 200),
                        // _tableCellSpace(10),
                        // _tableCellTitle('Date of Birth'),
                        _tableCellEntry(
                            (data['dateOfBirth'] as Timestamp)
                                .toDate()
                                .format(EuropeanDateFormats.shortHyphenated),
                            100),
                        DataCell(
                          SizedBox(
                            child: FutureBuilder(
                                future:
                                    DatabaseService.checkSignatureExsistsInFBStorage(data['uid']),
                                builder: (context, snapshot) {
                                  if (snapshot.hasError) {
                                    return Text(snapshot.error.toString());
                                  }
                                  if (snapshot.connectionState == ConnectionState.waiting) {
                                    return const LoadingModule();
                                  }
                                  return SignatureListEntryModule(signatureExists: snapshot.data!);
                                }),
                          ),
                        ),
                        // _tableCellSpace(10),
                        // _tableCellTitle('Creation Time'),
                        _tableCellEntry((data['creationTime'] as Timestamp).toDate().format(), 100),
                        // _tableCellSpace(10),
                        // _tableCellTitle('Last Update'),
                        _tableCellEntry((data['lastUpdate'] as Timestamp).toDate().format(), 100)
                      ],
                    );
                  },
                ).toList()

                
  Widget _tableCellSpace(double width) {
    return SizedBox(
      width: width,
    );
  }

  DataCell _tableCellTitle(String title) {
    return DataCell(
      Text(
        '$title: ',
        style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
      ),
    );
  }

  DataCell _tableCellEntry(String entry, double width) {
    return DataCell(SizedBox(width: width, child: Text(entry)));
  }

  Widget _tableCellName(String firstName, String lastName) {
    return SizedBox(
      width: 150,
      child: Align(
        alignment: Alignment.centerLeft,
        child: Text(
          '$firstName $lastName',
          style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
        ),
      ),
    );
  }


    var screenSize = MediaQuery.of(context).size;
    return Row(children: [
      const Column(children: [
        ElevatedButton(onPressed: FilesystemService.pickFile, child: Text('Pick File')),
      ]),
      StreamBuilder<QuerySnapshot>(
          stream: FirebaseFirestore.instance.collection('people').snapshots(),
          builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
            if (snapshot.hasError) {
              return Center(
                child: Text(
                  snapshot.error.toString(),
                  style:
                      TextStyle(fontSize: 30, fontWeight: FontWeight.bold, color: Colors.red[900]),
                ),
              );
            }

            if (snapshot.connectionState == ConnectionState.waiting) {
              return const LoadingModule.fullScreen();
            }

            final people = snapshot.data!.docs
                .map((document) => document.data() as Map<String, dynamic>)
                .map((map) => UserModel.fromMap(map: map))
                .toList();